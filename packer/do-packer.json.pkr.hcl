# This file was autogenerated by the BETA 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/from-1.5/variables#type-constraints for more info.
variable "api_token" {
  type    = string
  default = ""
}

variable "region" {
  type        = string
  default     = "fra1"
  description = "The name (or slug) of the region to launch the droplet in."
}

# "timestamp" template function replacement
locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/from-1.5/blocks/source
source "digitalocean" "opendax" {
  api_token     = "${var.api_token}"
  image         = "debian-9-x64"
  region        = "${var.region}"
  size          = "s-4vcpu-8gb"
  snapshot_name = "opendax-${local.timestamp}"
  ssh_username  = "root"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/from-1.5/blocks/build
build {
  sources = ["source.digitalocean.opendax"]

  provisioner "shell" {
    script = "./packer/scripts/install-base.sh"
  }
  provisioner "shell" {
    inline = ["sudo newgrp docker"]
  }
  provisioner "shell-local" {
    inline = ["cp -r `ls -A | grep -v opendax | grep -v packer` ./opendax"]
  }
  provisioner "file" {
    destination = "/home/deploy"
    source      = "./opendax"
  }
  provisioner "shell-local" {
    inline = ["rm -rf ./opendax", "mkdir opendax", "touch ./opendax/.gitkeep"]
  }
  provisioner "shell" {
    inline = ["sudo chown -R deploy: /home/deploy"]
  }
  provisioner "shell" {
    scripts = ["./packer/scripts/install-ruby.sh", "./packer/scripts/install-opendax.sh"]
  }
  provisioner "shell" {
    scripts = ["./packer/scripts/cleanup.sh", "./packer/scripts/img-check.sh"]
  }
}
